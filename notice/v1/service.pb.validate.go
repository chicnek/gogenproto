// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notice/v1/service.proto

package notice_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListNoticesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNoticesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNoticesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNoticesRequestMultiError, or nil if none found.
func (m *ListNoticesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNoticesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListNoticesRequestMultiError(errors)
	}
	return nil
}

// ListNoticesRequestMultiError is an error wrapping multiple validation errors
// returned by ListNoticesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListNoticesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNoticesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNoticesRequestMultiError) AllErrors() []error { return m }

// ListNoticesRequestValidationError is the validation error returned by
// ListNoticesRequest.Validate if the designated constraints aren't met.
type ListNoticesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNoticesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNoticesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNoticesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNoticesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNoticesRequestValidationError) ErrorName() string {
	return "ListNoticesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNoticesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNoticesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNoticesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNoticesRequestValidationError{}

// Validate checks the field values on ListNoticesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNoticesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNoticesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNoticesResponseMultiError, or nil if none found.
func (m *ListNoticesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNoticesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNoticesResponseValidationError{
						field:  fmt.Sprintf("Notices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNoticesResponseValidationError{
						field:  fmt.Sprintf("Notices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNoticesResponseValidationError{
					field:  fmt.Sprintf("Notices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListNoticesResponseMultiError(errors)
	}
	return nil
}

// ListNoticesResponseMultiError is an error wrapping multiple validation
// errors returned by ListNoticesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNoticesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNoticesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNoticesResponseMultiError) AllErrors() []error { return m }

// ListNoticesResponseValidationError is the validation error returned by
// ListNoticesResponse.Validate if the designated constraints aren't met.
type ListNoticesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNoticesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNoticesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNoticesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNoticesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNoticesResponseValidationError) ErrorName() string {
	return "ListNoticesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNoticesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNoticesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNoticesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNoticesResponseValidationError{}

// Validate checks the field values on CreateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoticeRequestMultiError, or nil if none found.
func (m *CreateNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for Content

	if len(errors) > 0 {
		return CreateNoticeRequestMultiError(errors)
	}
	return nil
}

// CreateNoticeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNoticeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoticeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoticeRequestMultiError) AllErrors() []error { return m }

// CreateNoticeRequestValidationError is the validation error returned by
// CreateNoticeRequest.Validate if the designated constraints aren't met.
type CreateNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoticeRequestValidationError) ErrorName() string {
	return "CreateNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoticeRequestValidationError{}

// Validate checks the field values on CreateNoticeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNoticeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoticeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoticeResponseMultiError, or nil if none found.
func (m *CreateNoticeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoticeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateNoticeResponseMultiError(errors)
	}
	return nil
}

// CreateNoticeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNoticeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNoticeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoticeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoticeResponseMultiError) AllErrors() []error { return m }

// CreateNoticeResponseValidationError is the validation error returned by
// CreateNoticeResponse.Validate if the designated constraints aren't met.
type CreateNoticeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoticeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoticeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoticeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoticeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoticeResponseValidationError) ErrorName() string {
	return "CreateNoticeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoticeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoticeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoticeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoticeResponseValidationError{}

// Validate checks the field values on UpdateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoticeRequestMultiError, or nil if none found.
func (m *UpdateNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Subject

	// no validation rules for Content

	if len(errors) > 0 {
		return UpdateNoticeRequestMultiError(errors)
	}
	return nil
}

// UpdateNoticeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNoticeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoticeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoticeRequestMultiError) AllErrors() []error { return m }

// UpdateNoticeRequestValidationError is the validation error returned by
// UpdateNoticeRequest.Validate if the designated constraints aren't met.
type UpdateNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoticeRequestValidationError) ErrorName() string {
	return "UpdateNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoticeRequestValidationError{}

// Validate checks the field values on DeleteNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNoticeRequestMultiError, or nil if none found.
func (m *DeleteNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteNoticeRequestMultiError(errors)
	}
	return nil
}

// DeleteNoticeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNoticeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNoticeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNoticeRequestMultiError) AllErrors() []error { return m }

// DeleteNoticeRequestValidationError is the validation error returned by
// DeleteNoticeRequest.Validate if the designated constraints aren't met.
type DeleteNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoticeRequestValidationError) ErrorName() string {
	return "DeleteNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoticeRequestValidationError{}

// Validate checks the field values on GetNoticeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoticeRequestMultiError, or nil if none found.
func (m *GetNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNoticeRequestMultiError(errors)
	}
	return nil
}

// GetNoticeRequestMultiError is an error wrapping multiple validation errors
// returned by GetNoticeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeRequestMultiError) AllErrors() []error { return m }

// GetNoticeRequestValidationError is the validation error returned by
// GetNoticeRequest.Validate if the designated constraints aren't met.
type GetNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeRequestValidationError) ErrorName() string { return "GetNoticeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeRequestValidationError{}

// Validate checks the field values on GetNoticeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNoticeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoticeResponseMultiError, or nil if none found.
func (m *GetNoticeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNotice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNoticeResponseValidationError{
					field:  "Notice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNoticeResponseValidationError{
					field:  "Notice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNoticeResponseValidationError{
				field:  "Notice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNoticeResponseMultiError(errors)
	}
	return nil
}

// GetNoticeResponseMultiError is an error wrapping multiple validation errors
// returned by GetNoticeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetNoticeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeResponseMultiError) AllErrors() []error { return m }

// GetNoticeResponseValidationError is the validation error returned by
// GetNoticeResponse.Validate if the designated constraints aren't met.
type GetNoticeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeResponseValidationError) ErrorName() string {
	return "GetNoticeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNoticeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeResponseValidationError{}
