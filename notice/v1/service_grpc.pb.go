// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: notice/v1/service.proto

package notice_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoticeServiceClient is the client API for NoticeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoticeServiceClient interface {
	ListNotices(ctx context.Context, in *ListNoticesRequest, opts ...grpc.CallOption) (*ListNoticesResponse, error)
	CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...grpc.CallOption) (*CreateNoticeResponse, error)
	GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*GetNoticeResponse, error)
	UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type noticeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoticeServiceClient(cc grpc.ClientConnInterface) NoticeServiceClient {
	return &noticeServiceClient{cc}
}

func (c *noticeServiceClient) ListNotices(ctx context.Context, in *ListNoticesRequest, opts ...grpc.CallOption) (*ListNoticesResponse, error) {
	out := new(ListNoticesResponse)
	err := c.cc.Invoke(ctx, "/notice.v1.NoticeService/ListNotices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...grpc.CallOption) (*CreateNoticeResponse, error) {
	out := new(CreateNoticeResponse)
	err := c.cc.Invoke(ctx, "/notice.v1.NoticeService/CreateNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*GetNoticeResponse, error) {
	out := new(GetNoticeResponse)
	err := c.cc.Invoke(ctx, "/notice.v1.NoticeService/GetNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/notice.v1.NoticeService/UpdateNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeServiceClient) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/notice.v1.NoticeService/DeleteNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeServiceServer is the server API for NoticeService service.
// All implementations should embed UnimplementedNoticeServiceServer
// for forward compatibility
type NoticeServiceServer interface {
	ListNotices(context.Context, *ListNoticesRequest) (*ListNoticesResponse, error)
	CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeResponse, error)
	GetNotice(context.Context, *GetNoticeRequest) (*GetNoticeResponse, error)
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error)
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*emptypb.Empty, error)
}

// UnimplementedNoticeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNoticeServiceServer struct {
}

func (UnimplementedNoticeServiceServer) ListNotices(context.Context, *ListNoticesRequest) (*ListNoticesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotices not implemented")
}
func (UnimplementedNoticeServiceServer) CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotice not implemented")
}
func (UnimplementedNoticeServiceServer) GetNotice(context.Context, *GetNoticeRequest) (*GetNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotice not implemented")
}
func (UnimplementedNoticeServiceServer) UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedNoticeServiceServer) DeleteNotice(context.Context, *DeleteNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}

// UnsafeNoticeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoticeServiceServer will
// result in compilation errors.
type UnsafeNoticeServiceServer interface {
	mustEmbedUnimplementedNoticeServiceServer()
}

func RegisterNoticeServiceServer(s grpc.ServiceRegistrar, srv NoticeServiceServer) {
	s.RegisterService(&NoticeService_ServiceDesc, srv)
}

func _NoticeService_ListNotices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoticesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).ListNotices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.v1.NoticeService/ListNotices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).ListNotices(ctx, req.(*ListNoticesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_CreateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).CreateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.v1.NoticeService/CreateNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).CreateNotice(ctx, req.(*CreateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.v1.NoticeService/GetNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).GetNotice(ctx, req.(*GetNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.v1.NoticeService/UpdateNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).UpdateNotice(ctx, req.(*UpdateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeService_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServiceServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.v1.NoticeService/DeleteNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServiceServer).DeleteNotice(ctx, req.(*DeleteNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NoticeService_ServiceDesc is the grpc.ServiceDesc for NoticeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoticeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notice.v1.NoticeService",
	HandlerType: (*NoticeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNotices",
			Handler:    _NoticeService_ListNotices_Handler,
		},
		{
			MethodName: "CreateNotice",
			Handler:    _NoticeService_CreateNotice_Handler,
		},
		{
			MethodName: "GetNotice",
			Handler:    _NoticeService_GetNotice_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _NoticeService_UpdateNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _NoticeService_DeleteNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notice/v1/service.proto",
}
