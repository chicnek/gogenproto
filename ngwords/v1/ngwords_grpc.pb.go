// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: ngwords/v1/ngwords.proto

package ngwordsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeywordsServiceClient is the client API for KeywordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeywordsServiceClient interface {
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	Convert(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error)
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type keywordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeywordsServiceClient(cc grpc.ClientConnInterface) KeywordsServiceClient {
	return &keywordsServiceClient{cc}
}

func (c *keywordsServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/ngwords.v1.KeywordsService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordsServiceClient) Convert(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error) {
	out := new(ConvertResponse)
	err := c.cc.Invoke(ctx, "/ngwords.v1.KeywordsService/Convert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keywordsServiceClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ngwords.v1.KeywordsService/Build", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeywordsServiceServer is the server API for KeywordsService service.
// All implementations should embed UnimplementedKeywordsServiceServer
// for forward compatibility
type KeywordsServiceServer interface {
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	Convert(context.Context, *ConvertRequest) (*ConvertResponse, error)
	Build(context.Context, *BuildRequest) (*emptypb.Empty, error)
}

// UnimplementedKeywordsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKeywordsServiceServer struct {
}

func (UnimplementedKeywordsServiceServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedKeywordsServiceServer) Convert(context.Context, *ConvertRequest) (*ConvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedKeywordsServiceServer) Build(context.Context, *BuildRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}

// UnsafeKeywordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeywordsServiceServer will
// result in compilation errors.
type UnsafeKeywordsServiceServer interface {
	mustEmbedUnimplementedKeywordsServiceServer()
}

func RegisterKeywordsServiceServer(s grpc.ServiceRegistrar, srv KeywordsServiceServer) {
	s.RegisterService(&KeywordsService_ServiceDesc, srv)
}

func _KeywordsService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordsServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ngwords.v1.KeywordsService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordsServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeywordsService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordsServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ngwords.v1.KeywordsService/Convert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordsServiceServer).Convert(ctx, req.(*ConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeywordsService_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeywordsServiceServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ngwords.v1.KeywordsService/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeywordsServiceServer).Build(ctx, req.(*BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeywordsService_ServiceDesc is the grpc.ServiceDesc for KeywordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeywordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ngwords.v1.KeywordsService",
	HandlerType: (*KeywordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _KeywordsService_Validate_Handler,
		},
		{
			MethodName: "Convert",
			Handler:    _KeywordsService_Convert_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _KeywordsService_Build_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ngwords/v1/ngwords.proto",
}
